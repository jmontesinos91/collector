// Code generated by mockery v2.26.1. DO NOT EDIT.

package trafficmocks

import (
	context "context"

	"github.com/jmontesinos91/collector/internal/repositories/traffic"
	mock "github.com/stretchr/testify/mock"
)

// IRepository is an autogenerated mock type for the IRepository type
type IRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, model
func (_m *IRepository) Create(ctx context.Context, model *traffic.Model) error {
	ret := _m.Called(ctx, model)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *traffic.Model) error); ok {
		r0 = rf(ctx, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByID provides a mock function with given fields: ctx, trafficID
func (_m *IRepository) DeleteByID(ctx context.Context, trafficID string) error {
	ret := _m.Called(ctx, trafficID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, trafficID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByIMEI provides a mock function with given fields: ctx, imei, isAlarm
func (_m *IRepository) FindByIMEI(ctx context.Context, imei string, isAlarm bool) (bool, error) {
	ret := _m.Called(ctx, imei, isAlarm)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) (bool, error)); ok {
		return rf(ctx, imei, isAlarm)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) bool); ok {
		r0 = rf(ctx, imei, isAlarm)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, bool) error); ok {
		r1 = rf(ctx, imei, isAlarm)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByLastUsed provides a mock function with given fields: ctx
func (_m *IRepository) FindByLastUsed(ctx context.Context) ([]traffic.Model, error) {
	ret := _m.Called(ctx)

	var r0 []traffic.Model
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]traffic.Model, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []traffic.Model); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]traffic.Model)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Retrieve provides a mock function with given fields: ctx, filter
func (_m *IRepository) Retrieve(ctx context.Context, filter *traffic.Metadata) ([]traffic.Model, error) {
	ret := _m.Called(ctx, filter)

	var r0 []traffic.Model
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *traffic.Metadata) ([]traffic.Model, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *traffic.Metadata) []traffic.Model); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]traffic.Model)
		}
	}

	if rf, ok := ret.Get(3).(func(context.Context, *traffic.Metadata) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(3)
	}

	return r0, r1
}

// RetrieveData provides a mock function with given fields: ctx, filter
func (_m *IRepository) RetrieveData(ctx context.Context, filter *traffic.Metadata) ([]traffic.Model, error) {
	ret := _m.Called(ctx, filter)

	var r0 []traffic.Model
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *traffic.Metadata) ([]traffic.Model, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *traffic.Metadata) []traffic.Model); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]traffic.Model)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *traffic.Metadata) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateByIMEI provides a mock function with given fields: ctx, imei, request, isAlarm
func (_m *IRepository) UpdateByIMEI(ctx context.Context, imei string, request string, isAlarm bool) error {
	ret := _m.Called(ctx, imei, request, isAlarm)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, bool) error); ok {
		r0 = rf(ctx, imei, request, isAlarm)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateIsNotified provides a mock function with given fields: ctx, trafficID
func (_m *IRepository) UpdateIsNotified(ctx context.Context, trafficID string) error {
	ret := _m.Called(ctx, trafficID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, trafficID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewIRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewIRepository creates a new instance of IRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIRepository(t mockConstructorTestingTNewIRepository) *IRepository {
	mock := &IRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
