// Code generated by mockery v2.26.1. DO NOT EDIT.

package routeroldmocks

import (
	context "context"

	"github.com/jmontesinos91/collector/internal/repositories/routerold"
	mock "github.com/stretchr/testify/mock"
)

// IRepository is an autogenerated mock type for the IRepository type
type IRepository struct {
	mock.Mock
}

// ActiveAndDeactivateRouter provides a mock function with given fields: ctx, routerID, active
func (_m *IRepository) ActiveAndDeactivateRouter(ctx context.Context, routerID int, active int) error {
	ret := _m.Called(ctx, routerID, active)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) error); ok {
		r0 = rf(ctx, routerID, active)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByIMEI provides a mock function with given fields: ctx, imei
func (_m *IRepository) FindByIMEI(ctx context.Context, imei string) (*routerold.RouterModel, error) {
	ret := _m.Called(ctx, imei)

	var r0 *routerold.RouterModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*routerold.RouterModel, error)); ok {
		return rf(ctx, imei)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *routerold.RouterModel); ok {
		r0 = rf(ctx, imei)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*routerold.RouterModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, imei)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLatAndLong provides a mock function with given fields: ctx, routerID, lat, long
func (_m *IRepository) UpdateLatAndLong(ctx context.Context, routerID int, lat string, long string) error {
	ret := _m.Called(ctx, routerID, lat, long)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string, string) error); ok {
		r0 = rf(ctx, routerID, lat, long)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewIRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewIRepository creates a new instance of IRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIRepository(t mockConstructorTestingTNewIRepository) *IRepository {
	mock := &IRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
