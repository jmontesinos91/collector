// Code generated by mockery v2.26.1. DO NOT EDIT.

package locationsoldmocks

import (
	context "context"

	"github.com/jmontesinos91/collector/internal/repositories/locationsold"

	mock "github.com/stretchr/testify/mock"
)

// IRepository is an autogenerated mock type for the IRepository type
type IRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, model
func (_m *IRepository) Create(ctx context.Context, model *locationsold.LocationsModel) (int, error) {
	ret := _m.Called(ctx, model)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *locationsold.LocationsModel) (int, error)); ok {
		return rf(ctx, model)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *locationsold.LocationsModel) int); ok {
		r0 = rf(ctx, model)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *locationsold.LocationsModel) error); ok {
		r1 = rf(ctx, model)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewIRepository creates a new instance of IRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIRepository(t mockConstructorTestingTNewIRepository) *IRepository {
	mock := &IRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
